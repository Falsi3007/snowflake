create table FRUIT_OPTIONS  (
  FRUIT_ID number, 
  FRUIT_NAME text (25)
);

create file format smoothies.public.two_headerrow_pct_delim
   type = CSV,
   skip_header = 2,   
   field_delimiter = '%',
   trim_space = TRUE
;

SELECT * from fruit_options;

SELECT $1, $2
FROM @SMOOTHIES.PUBLIC.MY_UPLOADED_FILES/fruits_available_for_smoothies.txt
(FILE_FORMAT => SMOOTHIES.PUBLIC.TWO_HEADERROW_PCT_DELIM);

COPY INTO smoothies.public.fruit_options
from (select $2 as FRUIT_ID , $1 as FRUIT_NAME from @SMOOTHIES.PUBLIC.MY_UPLOADED_FILES/fruits_available_for_smoothies.txt)
file_format = (format_name = smoothies.public.two_headerrow_pct_delim)
on_error = abort_statement 
purge = true;

-- DO NOT EDIT ANYTHING BELOW THIS LINE
select grader(step, (actual = expected), actual, expected, description) as graded_results from 
  ( SELECT 
  'DORA_IS_WORKING' as step
 ,(select 223) as actual
 , 223 as expected
 ,'Dora is working!' as description
); 

-- DO NOT EDIT ANYTHING BELOW THIS LINE
select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
  SELECT 'DABW001' as step
 ,( select count(*) 
   from SMOOTHIES.PUBLIC.FRUIT_OPTIONS) as actual
 , 25 as expected
 ,'Fruit Options table looks good' as description
);

create or replace table smoothies.public.orders (
       order_uid integer default smoothies.public.order_seq.nextval,
       order_filled boolean default false,
       name_on_order varchar(100),
       ingredients varchar(200),
       constraint order_uid unique (order_uid),
       order_ts timestamp_ltz default current_timestamp()
);

 update smoothies.public.orders
       set order_filled = true
       where name_on_order is null;

ALTER TABLE smoothies.public.fruit_options
ADD COLUMN SEARCH_ON STRING;

select * from SMOOTHIES.PUBLIC.FRUIT_OPTIONS;

UPDATE smoothies.public.fruit_options
SET SEARCH_ON = 'Apple'
WHERE FRUIT_NAME = 'Apples';

UPDATE smoothies.public.fruit_options
SET SEARCH_ON = 'Blueberry'
WHERE FRUIT_NAME = 'Blueberries';

UPDATE smoothies.public.fruit_options
SET SEARCH_ON = 'Jackfruit'
WHERE FRUIT_NAME = 'Jackfruit';

UPDATE smoothies.public.fruit_options
SET SEARCH_ON = 'Raspberry'
WHERE FRUIT_NAME = 'Raspberries';

UPDATE smoothies.public.fruit_options
SET SEARCH_ON = 'Strawberry'
WHERE FRUIT_NAME = 'Strawberries';

UPDATE smoothies.public.fruit_options
SET SEARCH_ON = 'Ximenia'
WHERE FRUIT_NAME = 'Ximenia';

insert into smoothies.public.orders(ingredients) values ('Kiwi Guava Jackfruit Elderberries Figs ');

select * from SMOOTHIES.PUBLIC.ORDERS;

select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
SELECT 'DABW002' as step
 ,(select IFF(count(*)>=5,5,0)
    from (select ingredients from smoothies.public.orders
    group by ingredients)
 ) as actual
 ,  5 as expected
 ,'At least 5 different orders entered' as description
);

select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
  SELECT 'DABW003' as step
 ,(select ascii(fruit_name) from smoothies.public.fruit_options
where fruit_name ilike 'z%') as actual
 , 90 as expected
 ,'A mystery check for the inquisitive' as description
);

alter table SMOOTHIES.PUBLIC.ORDERS add column name_on_order varchar(100);

-- insert into smoothies.public.orders(ingredients,name_on_order) values ('Figs Guava Honeydew' ,falsi');

-- select * from SMOOTHIES.PUBLIC.ORDERS where name_on_order is null;

select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
  SELECT 'DABW004' as step
 ,( select count(*) from smoothies.information_schema.columns
    where table_schema = 'PUBLIC' 
    and table_name = 'ORDERS'
    and column_name = 'ORDER_FILLED'
    and column_default = 'FALSE'
    and data_type = 'BOOLEAN') as actual
 , 1 as expected
 ,'Order Filled is Boolean' as description
);


select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
 SELECT 'DABW005' as step
 ,(select count(*) from SMOOTHIES.INFORMATION_SCHEMA.STAGES
where stage_name like '%(Stage)') as actual
 , 2 as expected
 ,'There seem to be 2 SiS Apps' as description
);

set mystery_bag = 'this is empty!!';

select $mystery_bag;

set var1 = 2;
set var2 = 5 ;
set var3 = 7;

select $var1+$var2+$var3;

create function sum_mystery_bag_vars (var1 number,var2 number,var3 number)
returns number as 'select var1+var2+var3';

set eeny = 4;
set meeny = 67.2;
set miney_mo = -39;

select sum_mystery_bag_vars ($eeny,$meeny,$miney_mo);

set this = -10.5 ;
set that = 2;
set the_other = 1000  ;

-- DO NOT EDIT ANYTHING BELOW THIS LINE
select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
  SELECT 'DABW006' as step
 ,( select util_db.public.sum_mystery_bag_vars($this,$that,$the_other)) as actual
 , 991.5 as expected
 ,'Mystery Bag Function Output' as description
);

set alternating_caps_phrase = 'aLtErNaTiNg CaPs!';
select $alternating_caps_phrase;

set alternating_caps_phrase = 'wHy ArE yOu LiKe tHiS?';
select initcap($alternating_caps_phrase);

create or replace function NEUTRALIZE_WHINING(var text)
returns  text as 'select initcap(var)';
 
select NEUTRALIZE_WHINING('fALSi');

select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
 SELECT 'DABW007' as step
 ,( select hash(neutralize_whining('bUt mOm i wAsHeD tHe dIsHes yEsTeRdAy'))) as actual
 , -4759027801154767056 as expected
 ,'WHINGE UDF Works' as description
);


select * from fruit_options;

select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
   SELECT 'DABW008' as step 
   ,( select sum(hash_ing) from
      (select hash(ingredients) as hash_ing
       from smoothies.public.orders
       where order_ts is not null 
       and name_on_order is not null 
       and (name_on_order = 'Kevin' and order_filled = FALSE and hash_ing = 7976616299844859825) 
       or (name_on_order ='Divya' and order_filled = TRUE and hash_ing = -6112358379204300652)
       or (name_on_order ='Xi' and order_filled = TRUE and hash_ing = 1016924841131818535))
     ) as actual 
   , 2881182761772377708 as expected 
   ,'Followed challenge lab directions' as description
); 

CREATE OR REPLACE PROCEDURE myproc(from_table STRING, to_table STRING, count INT)
  RETURNS STRING
  LANGUAGE PYTHON
  RUNTIME_VERSION = '3.9'
  PACKAGES = ('snowflake-snowpark-python')
  HANDLER = 'run'
as
$$
def run(session, from_table, to_table, count):
  session.table(from_table).limit(count).write.save_as_table(to_table)
  return "SUCCESS"
$$;

SELECT * FROM information_schema.packages WHERE package_name = 'snowflake-snowpark-python' ORDER BY version DESC;


CREATE OR REPLACE PROCEDURE output_message(message VARCHAR)
RETURNS VARCHAR NOT NULL
LANGUAGE SQL
AS
$$
BEGIN
  RETURN message;
END;
$$
;

CALL output_message('Hello World');

CREATE OR REPLACE TABLE test_bind_stage_and_load (a VARCHAR, b int);

CREATE OR REPLACE PROCEDURE test_copy_files_validate(
  my_stage_name VARCHAR,
  on_error int)
RETURNS Varchar
AS
$$
BEGIN
  COPY INTO test_bind_stage_and_load
    FROM :UTIL_DB.PUBLIC.MY_INTERNAL_STAGE
    ON_ERROR=:on_error
    FILE_FORMAT=(type='csv')
    VALIDATION_MODE=:valid_mode;
END;
$$
;
